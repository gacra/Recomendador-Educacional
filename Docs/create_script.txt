** Schema **

CREATE CONSTRAINT ON (perg:Pergunta) ASSERT perg.id IS UNIQUE
CREATE CONSTRAINT ON (mat:Material) ASSERT mat.id IS UNIQUE
(Para o termo tb??!!)

** Criação dos materiais **

with {endereço:3, vetor:5, ponteiro:7, variável:1, retorno:2} as map
MERGE (mat:Material {id: "re_material.002"})
SET mat += {titulo: "Ponteiro", link: "http://ponteiro.com.br", tipo: "html", resumo: "Resumo ponteiro"}
FOREACH(termo in keys(map) | merge(ter:Termo {termo:toLower(termo)}) merge (ter)<-[r:POSSUI]-(mat) set r.quantidade=map[termo])

** Criação Perguntas **

with {repetição:3, int:4, comando:5} as map
merge (pergunta:Pergunta {id:"re_pergunta.000"})
set pergunta += {enunciado:"Enunciado 000?", alternativas:["alt a", "alt b"]}
FOREACH(termo in keys(map) | merge(ter:Termo {termo:toLower(termo)}) merge (ter)<-[r:POSSUI]-(pergunta) set r.quantidade=map[termo])

** Setar o número de ocorrências de um termo, no próprio termo **

match (termo:Termo)<-[:Possui]-(mat:Material)
with termo, count(mat) as ocorr
set termo.ocorrencias = ocorr

OU

match (termo:Termo)<-[:Possui]-(mat)
where mat:Material or mat:Pergunta
with termo, count(mat) as ocorr
set termo.ocorrencias = ocorr

** Similaridade **

match (mat:Material)
with count(mat) as N

match (mat1:Material {id: "re_material.002"})-[r1:Possui]->(termo:Termo)
with N, mat1, termo, ((log10(r1.quantidade)/log10(2))+1.0) as tf1, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf1
with N, mat1, sum(tf1*idf1) as soma_tf_idf1

match (mat1)-[r1:Possui]->(termo:Termo)<-[r2:Possui]-(mat2:Material)
with N, mat1, mat2, soma_tf_idf1, termo, ((log10(r1.quantidade)/log10(2))+1.0) as tf1, ((log10(r2.quantidade)/log10(2))+1.0) as tf2,  log10(N/(termo.ocorrencias*1.0))/log10(2) as idf
with N, mat1, mat2, sum(tf1*tf2*idf*idf) as num, soma_tf_idf1

match (mat2)-[r2:Possui]->(termo:Termo)
with mat1, mat2, num, soma_tf_idf1, termo, ((log10(r2.quantidade)/log10(2))+1.0) as tf2, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf2
with mat1, mat2, num, soma_tf_idf1, sum(tf2*idf2) as soma_tf_idf2

return mat1, mat2, num / sqrt(soma_tf_idf1*soma_tf_idf2) as similaridade 
order by similaridade desc

** Similaridade com pergunta **

match (conteudo)
where conteudo:Material or conteudo:Pergunta
with count(conteudo) as N

match (mat1:Pergunta {id: "re_pergunta.002"})-[r1:Possui]->(termo:Termo)
with N, mat1, termo, ((log10(r1.quantidade)/log10(2))+1.0) as tf1, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf1
with N, mat1, sum(tf1*idf1) as soma_tf_idf1

match (mat1)-[r1:Possui]->(termo:Termo)<-[r2:Possui]-(mat2:Material)
with N, mat1, mat2, soma_tf_idf1, termo, ((log10(r1.quantidade)/log10(2))+1.0) as tf1, ((log10(r2.quantidade)/log10(2))+1.0) as tf2,  log10(N/(termo.ocorrencias*1.0))/log10(2) as idf
with N, mat1, mat2, sum(tf1*tf2*idf*idf) as num, soma_tf_idf1

match (mat2)-[r2:Possui]->(termo:Termo)
with mat1, mat2, num, soma_tf_idf1, termo, ((log10(r2.quantidade)/log10(2))+1.0) as tf2, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf2
with mat1, mat2, num, soma_tf_idf1, sum(tf2*idf2) as soma_tf_idf2

return mat1, mat2, num / sqrt(soma_tf_idf1*soma_tf_idf2) as similaridade 
order by similaridade desc

** Similaridade com múltiplas perguntas **

//Similaridade com multiplas perguntas
match (conteudo)
where conteudo:Material or conteudo:Pergunta
with count(conteudo) as N

with N, ["re_pergunta.000", "re_pergunta.001"] as pergs_ids
match (perg:Pergunta)
where perg.id in pergs_ids
with  N, collect(perg) as pergs

UNWIND pergs as mat1
match (mat1)-[r1:POSSUI]->(termo:Termo)
with N, pergs, termo, ((log10(sum(r1.quantidade))/log10(2))+1.0) as tf1, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf1
with N, pergs, sum(tf1*idf1) as soma_tf_idf1

UNWIND pergs as mat1
match (mat1)-[r1:POSSUI]->(termo:Termo)<-[r2:POSSUI]-(mat2:Material)
with N, mat2, soma_tf_idf1, termo, ((log10(sum(r1.quantidade))/log10(2))+1.0) as tf1, ((log10(r2.quantidade)/log10(2))+1.0) as tf2,  log10(N/(termo.ocorrencias*1.0))/log10(2) as idf
with N, mat2, sum(tf1*tf2*idf*idf) as num, soma_tf_idf1

match (mat2)-[r2:POSSUI]->(termo:Termo)
with mat2, num, soma_tf_idf1, termo, ((log10(r2.quantidade)/log10(2))+1.0) as tf2, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf2
with mat2, num, soma_tf_idf1, sum(tf2*idf2) as soma_tf_idf2

return mat2, num / sqrt(soma_tf_idf1*soma_tf_idf2) as similaridade 
order by similaridade desc


** Similaridade com múltiplas perguntas 2 **

match (conteudo)
where conteudo:Material or conteudo:Pergunta
with count(conteudo) as N

with N, ["re_pergunta.000", "re_pergunta.001"] as pergs_ids
match (perg:Pergunta)
where perg.id in pergs_ids
with  N, collect(perg) as pergs

UNWIND pergs as mat1
match (mat1)-[r1:POSSUI]->(termo:Termo)
with N, pergs, termo, ((log10(sum(r1.quantidade))/log10(2))+1.0) as tf1, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf1
with N, pergs, sum(tf1*idf1) as soma_tf_idf1

match (mat2:Material)-[r2:POSSUI]->(termo:Termo)
UNWIND pergs as mat1
optional match (termo)<-[r1:POSSUI]-(mat1)
with N, mat2, soma_tf_idf1, termo, case when r1 is not null then r1.quantidade else 0 end as r1_quantidade, r2
with N, mat2, soma_tf_idf1, termo, sum(r1_quantidade) as sum_r1_quantidade, r2
with mat2, soma_tf_idf1, termo, case when sum_r1_quantidade<>0 then ((log10(sum(sum_r1_quantidade))/log10(2))+1.0) else 0 end  as tf1, ((log10(r2.quantidade)/log10(2))+1.0) as tf2,  log10(N/(termo.ocorrencias*1.0))/log10(2) as idf
with mat2, sum(tf1*tf2*idf*idf) as num, soma_tf_idf1, sum(tf2*idf) as soma_tf_idf2

with mat2, num / sqrt(soma_tf_idf1*soma_tf_idf2) as similaridade
where similaridade > 0
return mat2, similaridade
order by similaridade desc

** Similaridade com múltiplas perguntas 3 **

match (conteudo)
where conteudo:Material or conteudo:Pergunta
with count(conteudo) as N

with N, ["re_pergunta.000", "re_pergunta.001"] as pergs_ids
match (perg:Pergunta)
where perg.id in pergs_ids
with  N, collect(perg) as pergs

UNWIND pergs as mat1
match (mat1)-[r1:POSSUI]->(termo:Termo)
with N, pergs, termo, ((log10(sum(r1.quantidade))/log10(2))+1.0) as tf1, log10(N/(termo.ocorrencias*1.0))/log10(2) as idf1
with N, pergs, sum(tf1*idf1) as soma_tf_idf1

match (mat2:Material) where any(mat1 in pergs where (mat1)-[:POSSUI]->(:Termo)<-[:POSSUI]-(mat2))
with N, mat2, pergs, soma_tf_idf1
match (mat2)-[r2:POSSUI]->(termo:Termo)
UNWIND pergs as mat1
optional match (termo)<-[r1:POSSUI]-(mat1)
with N, mat2, soma_tf_idf1, termo, case when r1 is not null then r1.quantidade else 0 end as r1_quantidade, r2
with N, mat2, soma_tf_idf1, termo, sum(r1_quantidade) as sum_r1_quantidade, r2
with mat2, soma_tf_idf1, termo, case when sum_r1_quantidade<>0 then ((log10(sum(sum_r1_quantidade))/log10(2))+1.0) else 0 end  as tf1, ((log10(r2.quantidade)/log10(2))+1.0) as tf2,  log10(N/(termo.ocorrencias*1.0))/log10(2) as idf
with mat2, sum(tf1*tf2*idf*idf) as num, soma_tf_idf1, sum(tf2*idf) as soma_tf_idf2

with mat2, num / sqrt(soma_tf_idf1*soma_tf_idf2) as similaridade
where similaridade > 0
return mat2, similaridade
order by similaridade desc